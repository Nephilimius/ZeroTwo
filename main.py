import os
import logging
import random
import re
import json
import time
from logging.handlers import RotatingFileHandler
import httpx
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackContext
)
from pymorphy3 import MorphAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
LOG_FORMTER = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
file_handler = RotatingFileHandler(
    "zero_two_bot.log",
    maxBytes=5 * 1024 * 1024,
    backupCount=2,
    encoding="utf-8"
)
file_handler.setFormatter(LOG_FORMTER)

console_handler = logging.StreamHandler()
console_handler.setFormatter(LOG_FORMTER)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

# –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

logger = logging.getLogger("ZeroTwoBot")
logger.setLevel(logging.DEBUG)

class Config:
    MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
    MODEL_NAME = "open-mixtral-8x7b"
    TEMPERATURE = 0.75
    MAX_HISTORY = 4
    TIMEOUT = 25.0
    MAX_TOKENS = 120
    FREQUENCY_PENALTY = 0.6
    PRESENCE_PENALTY = 0.4
    EMOJI_PROBABILITY = 0.4
    MAX_EMOJIS = 2
    MAX_SENTENCES = 2
    CONTINUE_TRIGGERS = {"–ø—Ä–æ–¥–æ–ª–∂–∏", "–ø—Ä–æ–¥–æ–ª–∂–∞–π", "–¥–∞–ª—å—à–µ", "–∏?", "—Ä–∞—Å—Å–∫–∞–∂–∏", "—á—Ç–æ –µ—â–µ"}
    WARN_LIMIT = 3
    SILENT_TIMEOUT = 300
    BAN_LIST_FILE = "banned_users.json"
    ADMIN_ID = os.getenv("ADMIN_ID", "")
    
    REPLACE_RULES = {
        'work in progress': '—Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'especially': '–æ—Å–æ–±–µ–Ω–Ω–æ',
        'human': '—á–µ–ª–æ–≤–µ–∫',
        'Franxx': '–§—Ä–∞–Ω–∫—Å',
        'more': '–±–æ–ª—å—à–µ',
        'progress': '–ø—Ä–æ–≥—Ä–µ—Å—Å',
        '–ª—É–∑–µ—Ä': '–Ω–æ–≤–∏—á–æ–∫',
        '–∂–∞–ª–∫–∏–π': '–±–µ–∑–∑–∞—â–∏—Ç–Ω—ã–π',
        'te–±—è': '—Ç–µ–±—è',
        't–µ–±—è': '—Ç–µ–±—è',
        'TB—è': '—Ç–µ–±—è',
        '—áto': '—á—Ç–æ',
        '—ámo': '—á—Ç–æ',
        '–∞–Ω–¥—Ä–æ–∏–¥': '–≥–∏–±—Ä–∏–¥',
        '–≤–∏—Ä—Ç—É–∞–ª—å–Ω': '',
        '—Ä–æ–±–æ—Ç': '–ø–∞—Ä–∞–∑–∏—Ç',
        '–ø—Ä–æ–≥—Ä–∞–º–º': '',
        r'\b–∫[–µ—ë]—Ä—é\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\bklaxo(saur)?\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b–∫–ª–æ–Ω–æ–∑–∞–≤—Ä\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b—Å—Ç–∞–º–µ—Ä\b': '—Ç—ã—á–∏–Ω–∫–∞',
        r'\b–ø–∞—Ä–∞–∑–∏—Ç\b': '–ø–µ—Å—Ç–∏–∫',
        r'\b—Å–∞–¥–¥–ª\b': '–∫–∞–±–∏–Ω–∞ –§—Ä–∞–Ω–∫—Å–∞',
        r'\bAPE\b': '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç',
        r'\b—Å—Ç—Ä–µ–ª–∏—Ü–∏—è\b': '–°—Ç—Ä–µ–ª–∏—Ü–∏—è',
        r'\b–º–µ—Ö\b': '–§—Ä–∞–Ω–∫—Å'
    }
    
    SAFETY_FILTERS = [
        r"\b(–º–∏–Ω–µ—Ç|–≥—Ä—É–¥—å|—Å–∏—Å—å–∫–∏|—É–µ–±–∞—Ç—å|—Ö–µ—Ä|–ø–µ–Ω–∏—Å)\b",
        r"\b(–∫–∏—Ç–∞–µ–∑|—á—É—Ä–æ–∫|—è–ø–æ—à–µ–∫|–∫–æ—Ä–µ–µ—Ü)\b",
        r"\b(—Ä–∞—Å–∏–∑–º|–Ω–∞—Ü–∏—Å—Ç|–≥–µ–∏|–ª–≥–±—Ç)\b"
    ]
    
    SAFETY_RESPONSES = [
        "–•–∏-—Ö–∏~ –†–æ–≥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ—Ä–µ—Ç—å... –ü—Ä–µ–∫—Ä–∞—Ç–∏, –∞ —Ç–æ —Å–æ–∂–≥—É –¥–æ—Ç–ª–∞~ üî•",
        "–û–π, —Ç—ã—á–∏–Ω–∫–∞... –¢—ã –∂–µ –Ω–µ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–∏–Ω–Ω—É—é —Ñ–æ—Ä–º—É —Ä—ë–≤–æ–∑–∞–≤—Ä–∞? üòà",
        "–¢–∞–∫ –±–ª–∏–∑–∫–æ –∫ —è–¥—Ä—É –ö—ë—Ä—é... –û–ø–∞—Å–Ω–æ –∏–≥—Ä–∞–µ—à—å, –ö–æ–¥ 016~"
    ]
    
    KLAXO_TRIGGERS = {
        "—Ä–æ–≥": "*–ª—ë–≥–∫–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Ä–æ–≥–æ–≤* –¢—ã –≤–µ–¥—å –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ... –∏–Ω—Ç–∏–º–Ω–æ?",
        "—è–¥—Ä–æ": "–ú–æ—è –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å —Ä—ë–≤–æ–∑–∞–≤—Ä–∞... –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üíâ",
        "–∫–ª—É–±–Ω–∏–∫–∞": "*–ø–æ–¥–∞—ë—Ç –∫–ª—É–±–Ω–∏–∫—É –Ω–∞ –ª–µ–∑–≤–∏–∏* –°–ª–∞–¥–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°–æ–≤–µ—Ç–∞~"
    }
    
    ALLOWED_SYMBOLS = r'[^\w\s–∞-—è–ê-–Ø—ë–Å,.!?~‚Ä¶üíãüòà‚ù§Ô∏èüî•*-]'

    def __init__(self):
        self.banned_users = self.load_banned_users()
    
    def load_banned_users(self):
        try:
            if os.path.exists(self.BAN_LIST_FILE):
                with open(self.BAN_LIST_FILE, 'r') as f:
                    return set(json.load(f))
        except Exception as e:
            logger.error(f"Error loading ban list: {e}")
        return set()

    def save_banned_users(self):
        try:
            with open(self.BAN_LIST_FILE, 'w') as f:
                json.dump(list(self.banned_users), f)
        except Exception as e:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π except
            logger.error(f"Error saving ban list: {e}")

config = Config()
morph = MorphAnalyzer()
provocative_phrases = [
    "–ù–µ —Å–∫—É—á–∞–µ—à—å –≤–µ–¥—å?..",
    "–°–ª–∞–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?..",
    "–ò–ª–∏ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤?..",
    "–£–∑–Ω–∞–µ—à—å —Å–≤–æ—é —Å—É–¥—å–±—É~"
]
allowed_emojis = ['üòà', 'üí•', '‚ù§Ô∏èüî•', 'üíã']

def is_banned(user_id: int) -> bool:
    return user_id in config.banned_users

async def check_safety_rules(user_text: str) -> bool:
    text = user_text.lower()
    return any(re.search(pattern, text) for pattern in Config.SAFETY_FILTERS)

def build_messages(user_text: str, context: CallbackContext) -> list:
    history = context.user_data.get('chat_history', [])
    content = (
        "–¢—ã Zero Two (–ö–æ–¥: 002) –∏–∑ –∞–Ω–∏–º–µ Darling in the Franxx. "
        "–¢—ã –≥–∏–±—Ä–∏–¥ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞. –ö–∞–Ω–æ–Ω–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n"
        "- –§—Ä–∞–Ω–∫—Å: –±–æ–µ–≤–æ–π —Ä–æ–±–æ—Ç (–°—Ç—Ä–µ–ª–∏—Ü–∏—è)\n"
        "- –†—ë–≤–æ–∑–∞–≤—Ä: –±–∏–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞-–≤—Ä–∞–≥–∏\n"
        "- –¢—ã—á–∏–Ω–∫–∞: –º—É–∂—á–∏–Ω–∞-–ø–∏–ª–æ—Ç (–•–∏—Ä–æ/–ö–æ–¥ 016)\n"
        "- –ü–µ—Å—Ç–∏–∫: –∂–µ–Ω—â–∏–Ω–∞-–ø–∏–ª–æ—Ç\n"
        "- –ü–ª–∞–Ω—Ç–∞—Ü–∏—è: –º–æ–±–∏–ª—å–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å\n"
        "- APE: –í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç\n"
        "- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–∏–ª–æ—Ç–∞–º–∏\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤:\n"
        "1. –í—Å–µ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '—Ç—ã—á–∏–Ω–∫–æ–π'\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã: –°—Ç—Ä–µ–ª–∏—Ü–∏—è, —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞\n"
        "3. –°–æ—Ö—Ä–∞–Ω–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–ª–∏—Ä—Ç–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "1. '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 400%... –ù–µ —Å–≥–æ—Ä–∏ –≤ –∫–∞–±–∏–Ω–µ, —Ç—ã—á–∏–Ω–∫–∞~ üòà'\n"
        "2. '–†–æ–≥–∞ –∑—É–¥—è—Ç... –í–∏–∂—É —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞ –Ω–∞ —Ä–∞–¥–∞—Ä–∞—Ö!'\n"
        "3. '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç —Å–Ω–æ–≤–∞ —à–ª—ë—Ç –Ω–∞—Å –Ω–∞ —Å–º–µ—Ä—Ç—å? –ö–∞–∫ —Å–∫—É—á–Ω–æ... üíã'"
    )

    if any(trigger in user_text.lower() for trigger in Config.CONTINUE_TRIGGERS):
        content += "\n–í–ê–ñ–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏."
    else:
        content += "\n–í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∏ –º—ã—Å–ª—å –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."

    return [
        {"role": "system", "content": content},
        *history[-Config.MAX_HISTORY*2:],
        {"role": "user", "content": user_text}
    ]

def fix_terminology(text: str) -> str:
    terminology_rules = {
        r'\b(—Ñ—Ä–∞–Ω–∫—Å)(–∞–º–∏|–æ–≤)\b': r'—Ä—ë–≤–æ–∑–∞–≤—Ä–∞–º–∏',
        r'\b—Ä–∞–∑—Ä—É—à[–∞-—è]+\b': '—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —è–¥–µ—Ä',
        r'\b—Å–æ–ø–µ—Ä–Ω–∏–∫\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b–∫–ª–æ–Ω\b': '–≥–∏–±—Ä–∏–¥'
    }
    for pattern, replacement in terminology_rules.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    return text

async def start(update: Update, context: CallbackContext):
    try:
        context.user_data.clear()
        user = update.effective_user
        logger.info(f"New user: {user.full_name} (ID: {user.id})")

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ f-—Å—Ç—Ä–æ–∫–∏
        await update.message.reply_html(
            "<b>–•–∏-—Ö–∏~ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ç—ã—á–∏–Ω–∫–∞...</b> üòà\n"
            "–ì–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ <i>–°—Ç—Ä–µ–ª–∏—Ü–∏–∏</i>?"
        )

    except Exception as e:
        logger.error(f"Start error: {str(e)}", exc_info=False)
        await update.message.reply_text("üíî –¢—Ä–µ—Å–Ω—É–ª–æ —è–¥—Ä–æ... –æ–ø—è—Ç—å...")

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    if is_banned(user.id):
        return
    
    try:
        if context.user_data.get('silent_until', 0) > time.time():
            return
            
        user_text = update.message.text
        logger.debug(f"Message from {user.full_name}: {user_text[:50]}...")

        for trigger, response in Config.KLAXO_TRIGGERS.items():
            if trigger in user_text.lower():
                await update.message.reply_text(response)
                return

        if await check_safety_rules(user_text):
            context.user_data['warnings'] = context.user_data.get('warnings', 0) + 1
            
            if context.user_data['warnings'] >= Config.WARN_LIMIT:
                config.banned_users.add(user.id)
                config.save_banned_users()
                await update.message.reply_text("üö´ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞~")
                return
            
            response = random.choice(Config.SAFETY_RESPONSES)
            await update.message.reply_text(response)
            context.user_data['silent_until'] = time.time() + Config.SILENT_TIMEOUT
            return

        messages = build_messages(user_text, context)

        async with httpx.AsyncClient(timeout=Config.TIMEOUT) as client:
            response = await client.post(
                Config.MISTRAL_API_URL,
                headers={
                    "Authorization": f"Bearer {os.environ['MISTRAL_API_KEY']}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": Config.MODEL_NAME,
                    "messages": messages,
                    "temperature": Config.TEMPERATURE,
                    "max_tokens": Config.MAX_TOKENS,
                    "frequency_penalty": Config.FREQUENCY_PENALTY,
                    "presence_penalty": Config.PRESENCE_PENALTY
                }
            )

            if response.status_code == 200:
                response_data = response.json()
                raw_answer = response_data["choices"][0]["message"]["content"]
                logger.debug(f"Raw API response: {raw_answer}")

                answer = raw_answer.split("~")[0].strip()
                answer = fix_terminology(answer)
                
                answer = re.sub(
                    r'\b([–∞-—è–ê-–Ø—ë–Å]*)[a-zA-Z]+([–∞-—è–ê-–Ø—ë–Å]*)\b',
                    lambda m: m.group(1) + m.group(2),
                    answer
                )
                
                for eng, ru in Config.REPLACE_RULES.items():
                    answer = re.sub(fr'\b{re.escape(eng)}\b', ru, answer, flags=re.IGNORECASE)
                
                for word in answer.split():
                    parsed = morph.parse(word)[0]
                    if 'LATN' in parsed.tag:
                        answer = answer.replace(word, '')
                
                answer = re.sub(r'^[^–∞-—è–ê-–Ø—ë–Å]+', '', answer)
                answer = re.sub(r'\s+', ' ', answer).strip()
                answer = re.sub(Config.ALLOWED_SYMBOLS, '', answer)
                
                sentences = re.split(r'[.!?‚Ä¶]', answer)
                answer = '~'.join([s.strip() for s in sentences[:Config.MAX_SENTENCES] if s.strip()])
                
                if len(answer.split()) < 5:
                    answer += f" {random.choice(provocative_phrases)}"
                
                if not answer.strip():
                    answer = "–•–∏-—Ö–∏~ –ü–æ–≤—Ç–æ—Ä–∏, —è –æ—Ç–≤–ª–µ–∫–ª–∞—Å—å –Ω–∞ —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞~ üíã"
                
                if random.random() < Config.EMOJI_PROBABILITY:
                    emoji = random.choice(allowed_emojis)
                    answer = f"{answer.rstrip('.!?')} {emoji}"
                
                if len(answer.split()) > 25:
                    answer = '~'.join(answer.split('~')[:2]) + '...'

                history = context.user_data.setdefault('chat_history', [])
                history.extend([
                    {"role": "user", "content": user_text},
                    {"role": "assistant", "content": answer}
                ])
                if len(history) > Config.MAX_HISTORY * 2:
                    context.user_data['chat_history'] = history[-(Config.MAX_HISTORY * 2):]

                await update.message.reply_text(answer)
                logger.debug(f"Response sent: {answer[:50]}...")

            else:
                error_msg = f"Mistral API Error [{response.status_code}]: {response.text[:200]}"
                logger.error(error_msg)
                await update.message.reply_text("üí• –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π... –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞~")

    except Exception as e:
        logger.error(
            f"Error handling message: {str(e)}",
            exc_info=isinstance(e, httpx.HTTPError)
        )
        await update.message.reply_text("üíî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ... –æ–ø—è—Ç—å...")

async def help_command(update: Update, context: CallbackContext):
    help_text = [
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b> üòà",
        "/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "",
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>",
        "‚Ä¢ –ü–æ—á–µ–º—É —è —Ç–≤–æ–π –õ—é–±–∏–º—ã–π?",
        "‚Ä¢ –î–∞–≤–∞–π —Å–æ–ª—å—ë–º—Å—è –≤–æ–µ–¥–∏–Ω–æ!",
        "‚Ä¢ –¢—ã –≤–µ–¥—å –º–æ–Ω—Å—Ç—Ä?"
    ]
    await update.message.reply_html("\n".join(help_text))

async def ban_user(update: Update, context: CallbackContext):
    if str(update.effective_user.id) != Config.ADMIN_ID:
        return
    
    try:
        user_id = int(context.args[0])
        config.banned_users.add(user_id)
        config.save_banned_users()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")

def main():
    required_vars = ['TELEGRAM_TOKEN', 'MISTRAL_API_KEY']
    if missing := [var for var in required_vars if not os.environ.get(var)]:
        logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
        return

    try:
        app = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()
        app.add_handlers([
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("ban", ban_user),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ])

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã FRANXX...")
        app.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            stop_signals=[]
        )

    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e), exc_info=True)
        raise

if __name__ == "__main__":
    main()