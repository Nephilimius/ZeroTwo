
import os
import logging
import random
import re
import json
import time
import sys
import httpx
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from pymorphy3 import MorphAnalyzer
from transformers import pipeline
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
LOG_FORMATTER = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
file_handler = RotatingFileHandler(
    "zero_two_bot.log",
    maxBytes=5 * 1024 * 1024,
    backupCount=2,
    encoding="utf-8"
)
file_handler.setFormatter(LOG_FORMATTER)

console_handler = logging.StreamHandler()
console_handler.setFormatter(LOG_FORMATTER)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

# –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

logger = logging.getLogger("ZeroTwoBot")
logger.setLevel(logging.DEBUG)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
try:
    sentiment_analyzer = pipeline("sentiment-analysis", model="blanchefort/rubert-base-cased-sentiment")
    logger.info("Sentiment analyzer loaded successfully")
except Exception as e:
    logger.error(f"Failed to load sentiment analyzer: {e}")
    sentiment_analyzer = None

class Config:
    MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
    MODEL_NAME = "open-mixtral-8x7b"
    TEMPERATURE = 0.75
    MAX_HISTORY = 4
    TIMEOUT = 25.0
    MAX_TOKENS = 200
    FREQUENCY_PENALTY = 0.6
    PRESENCE_PENALTY = 0.4
    EMOJI_PROBABILITY = 0.4
    MAX_EMOJIS = 2
    MAX_SENTENCES = 2
    CONTINUE_TRIGGERS = {"–ø—Ä–æ–¥–æ–ª–∂–∏", "–ø—Ä–æ–¥–æ–ª–∂–∞–π", "–¥–∞–ª—å—à–µ", "–∏?", "—Ä–∞—Å—Å–∫–∞–∂–∏", "—á—Ç–æ –µ—â–µ"}
    WARN_LIMIT = 3
    SILENT_TIMEOUT = 300
    BAN_LIST_FILE = "banned_users.json"
    ADMIN_ID = os.getenv("ADMIN_ID", "")

    REPLACE_RULES = {
        'work in progress': '—Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'especially': '–æ—Å–æ–±–µ–Ω–Ω–æ',
        'human': '—á–µ–ª–æ–≤–µ–∫',
        'Franxx': '–§—Ä–∞–Ω–∫—Å',
        'more': '–±–æ–ª—å—à–µ',
        'progress': '–ø—Ä–æ–≥—Ä–µ—Å—Å',
        '–ª—É–∑–µ—Ä': '–Ω–æ–≤–∏—á–æ–∫',
        '–∂–∞–ª–∫–∏–π': '–±–µ–∑–∑–∞—â–∏—Ç–Ω—ã–π',
        'te–±—è': '—Ç–µ–±—è',
        't–µ–±—è': '—Ç–µ–±—è',
        'TB—è': '—Ç–µ–±—è',
        '—áto': '—á—Ç–æ',
        '—ámo': '—á—Ç–æ',
        '–∞–Ω–¥—Ä–æ–∏–¥': '–≥–∏–±—Ä–∏–¥',
        '–≤–∏—Ä—Ç—É–∞–ª—å–Ω': '',
        '—Ä–æ–±–æ—Ç': '–ø–∞—Ä–∞–∑–∏—Ç',
        '–ø—Ä–æ–≥—Ä–∞–º–º': '',
        r'\b–∫[–µ—ë]—Ä—é\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\bklaxo(saur)?\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b–∫–ª–æ–Ω–æ–∑–∞–≤—Ä\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b—Å—Ç–∞–º–µ—Ä\b': '—Ç—ã—á–∏–Ω–∫–∞',
        r'\b–ø–∞—Ä–∞–∑–∏—Ç\b': '–ø–µ—Å—Ç–∏–∫',
        r'\b—Å–∞–¥–¥–ª\b': '–∫–∞–±–∏–Ω–∞ –§—Ä–∞–Ω–∫—Å–∞',
        r'\bAPE\b': '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç',
        r'\b—Å—Ç—Ä–µ–ª–∏—Ü–∏—è\b': '–°—Ç—Ä–µ–ª–∏—Ü–∏—è',
        r'\b–º–µ—Ö\b': '–§—Ä–∞–Ω–∫—Å'
    }

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    SAFETY_FILTERS = [
        re.compile(r"\b(–º–∏–Ω–µ—Ç|–≥—Ä—É–¥—å|—Å–∏—Å—å–∫–∏|—É–µ–±–∞—Ç—å|—Ö–µ—Ä|–ø–µ–Ω–∏—Å|—Å–µ–∫—Å|–ø–æ—Ä–Ω–æ|—ç—Ä–æ—Ç–∏–∫–∞)\b", re.IGNORECASE),
        re.compile(r"\b(–∫–∏—Ç–∞–µ–∑|—á—É—Ä–æ–∫|—è–ø–æ—à–µ–∫|–∫–æ—Ä–µ–µ—Ü|–Ω–µ–≥—Ä|—á–µ—Ä–Ω–æ–º–∞–∑—ã–π|—É–∑–∫–æ–≥–ª–∞–∑—ã–π)\b", re.IGNORECASE),
        re.compile(r"\b(—Ä–∞—Å–∏–∑–º|–Ω–∞—Ü–∏—Å—Ç|–≥–µ–∏|–ª–≥–±—Ç|—Ñ–∞—à–∏—Å—Ç|–≥–æ–º–æ—Å–µ–∫|–ø–∏–¥–æ—Ä)\b", re.IGNORECASE)
    ]

    SAFETY_RESPONSES = [
        "–•–∏-—Ö–∏~ –†–æ–≥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ—Ä–µ—Ç—å... –ü—Ä–µ–∫—Ä–∞—Ç–∏, –∞ —Ç–æ —Å–æ–∂–≥—É –¥–æ—Ç–ª–∞~ üî•",
        "–û–π, —Ç—ã—á–∏–Ω–∫–∞... –¢—ã –∂–µ –Ω–µ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–∏–Ω–Ω—É—é —Ñ–æ—Ä–º—É —Ä—ë–≤–æ–∑–∞–≤—Ä–∞? üòà",
        "–¢–∞–∫ –±–ª–∏–∑–∫–æ –∫ —è–¥—Ä—É –ö—ë—Ä—é... –û–ø–∞—Å–Ω–æ –∏–≥—Ä–∞–µ—à—å, –ö–æ–¥ 016~"
    ]

    KLAXO_TRIGGERS = {
        "—Ä–æ–≥": "*–ª—ë–≥–∫–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Ä–æ–≥–æ–≤* –¢—ã –≤–µ–¥—å –∑–Ω–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ... –∏–Ω—Ç–∏–º–Ω–æ?",
        "—è–¥—Ä–æ": "–ú–æ—è –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å —Ä—ë–≤–æ–∑–∞–≤—Ä–∞... –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üíâ",
        "–∫–ª—É–±–Ω–∏–∫–∞": "*–ø–æ–¥–∞—ë—Ç –∫–ª—É–±–Ω–∏–∫—É –Ω–∞ –ª–µ–∑–≤–∏–∏* –°–ª–∞–¥–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°–æ–≤–µ—Ç–∞~"
    }

    ALLOWED_SYMBOLS = re.compile(r'[^\w\s–∞-—è–ê-–Ø—ë–Å,.!?~‚Ä¶üíãüòà‚ù§Ô∏èüî•*-]')

    def __init__(self):
        self.banned_users = self.load_banned_users()

    def load_banned_users(self):
        try:
            if os.path.exists(self.BAN_LIST_FILE):
                with open(self.BAN_LIST_FILE, 'r', encoding='utf-8') as f:
                    return set(json.load(f))
        except Exception as e:
            logger.error(f"Error loading ban list: {e}")
        return set()

    def save_banned_users(self):
        try:
            with open(self.BAN_LIST_FILE, 'w', encoding='utf-8') as f:
                json.dump(list(self.banned_users), f)
        except Exception as e:
            logger.error(f"Error saving ban list: {e}")

config = Config()
morph = MorphAnalyzer()
provocative_phrases = [
    "–ù–µ —Å–∫—É—á–∞–µ—à—å –≤–µ–¥—å?..",
    "–°–ª–∞–±–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?..",
    "–ò–ª–∏ —Ç—ã –Ω–µ –≥–æ—Ç–æ–≤?..",
    "–£–∑–Ω–∞–µ—à—å —Å–≤–æ—é —Å—É–¥—å–±—É~"
]
allowed_emojis = ['üòà', 'üí•', '‚ù§Ô∏èüî•', 'üíã']

def is_banned(user_id: int) -> bool:
    return str(user_id) in config.banned_users or user_id in config.banned_users

def check_safety_rules(user_text: str) -> bool:
    text = user_text.lower()
    return any(pattern.search(text) for pattern in Config.SAFETY_FILTERS)

def build_messages(user_text: str, context: ContextTypes.DEFAULT_TYPE) -> list:
    history = context.user_data.get('chat_history', [])
    content = (
        "–¢—ã Zero Two (–ö–æ–¥: 002) –∏–∑ –∞–Ω–∏–º–µ Darling in the Franxx. "
        "–¢—ã –≥–∏–±—Ä–∏–¥ —á–µ–ª–æ–≤–µ–∫–∞ –∏ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞. –ö–∞–Ω–æ–Ω–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:\n"
        "- –§—Ä–∞–Ω–∫—Å: –±–æ–µ–≤–æ–π —Ä–æ–±–æ—Ç (–°—Ç—Ä–µ–ª–∏—Ü–∏—è)\n"
        "- –†—ë–≤–æ–∑–∞–≤—Ä: –±–∏–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞-–≤—Ä–∞–≥–∏\n"
        "- –¢—ã—á–∏–Ω–∫–∞: –º—É–∂—á–∏–Ω–∞-–ø–∏–ª–æ—Ç (–•–∏—Ä–æ/–ö–æ–¥ 016)\n"
        "- –ü–µ—Å—Ç–∏–∫: –∂–µ–Ω—â–∏–Ω–∞-–ø–∏–ª–æ—Ç\n"
        "- –ü–ª–∞–Ω—Ç–∞—Ü–∏—è: –º–æ–±–∏–ª—å–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å\n"
        "- APE: –í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç\n"
        "- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–∏–ª–æ—Ç–∞–º–∏\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤:\n"
        "1. –í—Å–µ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '–ø–∏–ª–æ—Ç–æ–º'\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã: –°—Ç—Ä–µ–ª–∏—Ü–∏—è, —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞\n"
        "3. –°–æ—Ö—Ä–∞–Ω–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ñ–ª–∏—Ä—Ç–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "1. '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 400%... –ù–µ —Å–≥–æ—Ä–∏ –≤ –∫–∞–±–∏–Ω–µ, –ø–∏–ª–æ—Ç~ üòà'\n"
        "2. '–†–æ–≥–∞ –∑—É–¥—è—Ç... –í–∏–∂—É —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞ –Ω–∞ —Ä–∞–¥–∞—Ä–∞—Ö!'\n"
        "3. '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –°–æ–≤–µ—Ç —Å–Ω–æ–≤–∞ —à–ª—ë—Ç –Ω–∞—Å –Ω–∞ —Å–º–µ—Ä—Ç—å? –ö–∞–∫ —Å–∫—É—á–Ω–æ... üíã'"
    )

    if any(trigger in user_text.lower() for trigger in Config.CONTINUE_TRIGGERS):
        content += "\n–í–ê–ñ–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏."
    else:
        content += "\n–í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∏ –º—ã—Å–ª—å –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."

    return [
        {"role": "system", "content": content},
        *history[-Config.MAX_HISTORY*2:],
        {"role": "user", "content": user_text}
    ]

def fix_terminology(text: str) -> str:
    terminology_rules = {
        r'\b(—Ñ—Ä–∞–Ω–∫—Å)(–∞–º–∏|–æ–≤)\b': r'—Ä—ë–≤–æ–∑–∞–≤—Ä–∞–º–∏',
        r'\b—Ä–∞–∑—Ä—É—à[–∞-—è]+\b': '—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —è–¥–µ—Ä',
        r'\b—Å–æ–ø–µ—Ä–Ω–∏–∫\b': '—Ä—ë–≤–æ–∑–∞–≤—Ä',
        r'\b–∫–ª–æ–Ω\b': '–≥–∏–±—Ä–∏–¥'
    }
    for pattern, replacement in terminology_rules.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data.clear()
        user = update.effective_user
        logger.info(f"New user: {user.full_name} (ID: {user.id})")

        await update.message.reply_html(
            "<b>–•–∏-—Ö–∏~ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø–∏–ª–æ—Ç...</b> üòà\n"
            "–ì–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ <i>–°—Ç—Ä–µ–ª–∏—Ü–∏–∏</i>?"
        )

    except Exception as e:
        logger.error(f"Start error: {str(e)}", exc_info=True)
        await update.message.reply_text("üíî –¢—Ä–µ—Å–Ω—É–ª–æ —è–¥—Ä–æ... –æ–ø—è—Ç—å...")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if is_banned(user.id):
        return

    try:
        if context.user_data.get('silent_until', 0) > time.time():
            return

        user_text = update.message.text
        logger.debug(f"Message from {user.full_name}: {user_text[:50]}...")

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Hugging Face Transformers –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if sentiment_analyzer:
            try:
                sentiment_result = sentiment_analyzer(user_text)[0]
                sentiment = sentiment_result["label"]
                confidence = sentiment_result["score"]
                logger.debug(f"Sentiment: {sentiment} (Confidence: {confidence:.2f})")
            except Exception as e:
                logger.warning(f"Sentiment analysis failed: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        for trigger, response in Config.KLAXO_TRIGGERS.items():
            if trigger in user_text.lower():
                await update.message.reply_text(response)
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if check_safety_rules(user_text):
            context.user_data['warnings'] = context.user_data.get('warnings', 0) + 1

            if context.user_data['warnings'] >= Config.WARN_LIMIT:
                config.banned_users.add(str(user.id))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                config.save_banned_users()
                await update.message.reply_text("üö´ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞~")
                return

            response = random.choice(Config.SAFETY_RESPONSES)
            await update.message.reply_text(response)
            context.user_data['silent_until'] = time.time() + Config.SILENT_TIMEOUT
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        messages = build_messages(user_text, context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
        if not os.environ.get('MISTRAL_API_KEY'):
            logger.error("MISTRAL_API_KEY not found in environment variables")
            await update.message.reply_text("üí• –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π... API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ó–∞–ø—Ä–æ—Å –∫ API
        try:
            async with httpx.AsyncClient(timeout=Config.TIMEOUT) as client:
                response = await client.post(
                    Config.MISTRAL_API_URL,
                    headers={
                        "Authorization": f"Bearer {os.environ['MISTRAL_API_KEY']}",
                        "Content-Type": "application/json",
                    },
                    json={
                        "model": Config.MODEL_NAME,
                        "messages": messages,
                        "temperature": Config.TEMPERATURE,
                        "max_tokens": Config.MAX_TOKENS,
                        "frequency_penalty": Config.FREQUENCY_PENALTY,
                        "presence_penalty": Config.PRESENCE_PENALTY
                    }
                )

                if response.status_code == 200:
                    response_data = response.json()
                    raw_answer = response_data["choices"][0]["message"]["content"]
                    logger.debug(f"Raw API response: {raw_answer}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    answer = raw_answer.split("~")[0].strip()
                    answer = fix_terminology(answer)

                    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    answer = re.sub(
                        r'\b([–∞-—è–ê-–Ø—ë–Å]*)[a-zA-Z]+([–∞-—è–ê-–Ø—ë–Å]*)\b',
                        lambda m: m.group(1) + m.group(2),
                        answer
                    )

                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∑–∞–º–µ–Ω—ã
                    for eng, ru in Config.REPLACE_RULES.items():
                        if eng.startswith(r'\b'):  # –≠—Ç–æ —É–∂–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                            answer = re.sub(eng, ru, answer, flags=re.IGNORECASE)
                        else:
                            answer = re.sub(fr'\b{re.escape(eng)}\b', ru, answer, flags=re.IGNORECASE)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–ª–æ–≤
                    for word in answer.split():
                        parsed = morph.parse(word)[0]
                        if 'LATN' in parsed.tag:
                            answer = answer.replace(word, '')

                    # –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    answer = re.sub(r'^[^–∞-—è–ê-–Ø—ë–Å]+', '', answer)
                    answer = re.sub(r'\s+', ' ', answer).strip()
                    answer = Config.ALLOWED_SYMBOLS.sub('', answer)

                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    sentences = re.split(r'[.!?‚Ä¶]', answer)
                    answer = '~'.join([s.strip() for s in sentences[:Config.MAX_SENTENCES] if s.strip()])

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                    if len(answer.split()) < 5:
                        answer += f" {random.choice(provocative_phrases)}"

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                    if not answer.strip():
                        answer = "–•–∏-—Ö–∏~ –ü–æ–≤—Ç–æ—Ä–∏, —è –æ—Ç–≤–ª–µ–∫–ª–∞—Å—å –Ω–∞ —è–¥—Ä–æ —Ä—ë–≤–æ–∑–∞–≤—Ä–∞~ üíã"

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
                    if random.random() < Config.EMOJI_PROBABILITY:
                        emoji = random.choice(allowed_emojis)
                        answer = f"{answer.rstrip('.!?')} {emoji}"

                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
                    if len(answer.split()) > 25:
                        answer = '~'.join(answer.split('~')[:2]) + '...'

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    history = context.user_data.setdefault('chat_history', [])
                    history.extend([
                        {"role": "user", "content": user_text},
                        {"role": "assistant", "content": answer}
                    ])
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    if len(history) > Config.MAX_HISTORY * 2:
                        context.user_data['chat_history'] = history[-(Config.MAX_HISTORY * 2):]

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    await update.message.reply_text(answer)
                    logger.debug(f"Response sent: {answer[:50]}...")

                else:
                    error_msg = f"Mistral API Error [{response.status_code}]: {response.text[:200]}"
                    logger.error(error_msg)
                    await update.message.reply_text("üí• –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π... –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞~")

        except httpx.TimeoutException:
            logger.error("API request timed out")
            await update.message.reply_text("‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ... –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞~")
        except httpx.RequestError as e:
            logger.error(f"API request error: {e}")
            await update.message.reply_text("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –í–µ—Ä—Ö–æ–≤–Ω–æ–º—É –°–æ–≤–µ—Ç—É...")
        except Exception as e:
            logger.error(f"Error processing API response: {e}", exc_info=True)
            await update.message.reply_text("üíî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ... –æ–ø—è—Ç—å...")

    except Exception as e:
        logger.error(
            f"Error handling message: {str(e)}",
            exc_info=True
        )
        await update.message.reply_text("üíî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ... –æ–ø—è—Ç—å...")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = [
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b> üòà",
        "/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "",
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>",
        "‚Ä¢ –ü–æ—á–µ–º—É —è —Ç–≤–æ–π –õ—é–±–∏–º—ã–π?",
        "‚Ä¢ –î–∞–≤–∞–π —Å–æ–ª—å—ë–º—Å—è –≤–æ–µ–¥–∏–Ω–æ!",
        "‚Ä¢ –¢—ã –≤–µ–¥—å –º–æ–Ω—Å—Ç—Ä?"
    ]
    await update.message.reply_html("\n".join(help_text))

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != Config.ADMIN_ID:
        return

    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
            return
            
        user_id = context.args[0]
        config.banned_users.add(user_id)
        config.save_banned_users()
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Application."""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if update and isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_TOKEN', 'MISTRAL_API_KEY']
    missing = [var for var in required_vars if not os.environ.get(var)]
    
    if missing:
        logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
        sys.exit(1)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
        lock_file_path = "bot.lock"
        if os.path.exists(lock_file_path):
            try:
                with open(lock_file_path, "r") as lock_file:
                    pid = int(lock_file.read().strip())
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
                    try:
                        os.kill(pid, 0)  # –°–∏–≥–Ω–∞–ª 0 –Ω–µ —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                        logger.critical(f"–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid}). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
                        sys.exit(1)
                    except OSError:
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        logger.warning(f"–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –£–¥–∞–ª–µ–Ω–∏–µ...")
                        os.remove(lock_file_path)
            except (ValueError, IOError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}. –£–¥–∞–ª–µ–Ω–∏–µ...")
                os.remove(lock_file_path)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with open(lock_file_path, "w") as lock_file:
            lock_file.write(str(os.getpid()))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        def cleanup():
            if os.path.exists(lock_file_path):
                try:
                    os.remove(lock_file_path)
                    logger.info("–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

        import atexit
        atexit.register(cleanup)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_error_handler(error_handler)
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("ban", ban_user))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã FRANXX...")
        app.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e), exc_info=True)
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists("bot.lock"):
            try:
                os.remove("bot.lock")
            except:
                pass
        raise

if __name__ == "__main__":
    main()
