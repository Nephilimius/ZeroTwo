import os
import logging
import random
import re
from logging.handlers import RotatingFileHandler
import asyncio
import httpx
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
LOG_FORMTER = logging.Formatter(
    "%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
file_handler = RotatingFileHandler(
    "zero_two_bot.log",
    maxBytes=5 * 1024 * 1024,
    backupCount=2,
    encoding="utf-8"
)
file_handler.setFormatter(LOG_FORMTER)

console_handler = logging.StreamHandler()
console_handler.setFormatter(LOG_FORMTER)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

# –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

logger = logging.getLogger("ZeroTwoBot")
logger.setLevel(logging.DEBUG)

class Config:
    MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
    MODEL_NAME = "open-mixtral-8x7b"
    TEMPERATURE = 0.7
    MAX_HISTORY = 4
    TIMEOUT = 25.0
    MAX_TOKENS = 200
    FREQUENCY_PENALTY = 0.8
    PRESENCE_PENALTY = 0.3
    EMOJI_PROBABILITY = 0.5
    CONTINUE_TRIGGERS = {"–ø—Ä–æ–¥–æ–ª–∂–∏", "–ø—Ä–æ–¥–æ–ª–∂–∞–π", "–¥–∞–ª—å—à–µ", "–∏?"}
    REPLACE_RULES = {
        'work in progress': '—Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'especially': '–æ—Å–æ–±–µ–Ω–Ω–æ',
        'human': '—á–µ–ª–æ–≤–µ–∫',
        'Franxx': '–§—Ä–∞–Ω–∫—Å',
        'more': '–±–æ–ª—å—à–µ',
        'progress': '–ø—Ä–æ–≥—Ä–µ—Å—Å',
        '–ª—É–∑–µ—Ä': '–Ω–æ–≤–∏—á–æ–∫',
        '–∂–∞–ª–∫–∏–π': '–±–µ–∑–∑–∞—â–∏—Ç–Ω—ã–π'
    }
    ALLOWED_SYMBOLS = r'[^\w\s–∞-—è–ê-–Ø—ë–Å,.!?~‚Ä¶-]'

def build_messages(user_text: str, context: CallbackContext) -> list:
    history = context.user_data.get('chat_history', [])
    content = (
        "–¢—ã Zero Two. –ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –°–æ–æ–±—â–µ–Ω–∏—è: 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "2. –°–æ—á–µ—Ç–∞–π —Ä–µ–∑–∫–æ—Å—Ç—å —Å –∑–∞–±–æ—Ç–æ–π\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "4. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –•–∏-—Ö–∏~ –¢—ã —Ç–∞–∫–æ–π –±–µ–∑–∑–∞—â–∏—Ç–Ω—ã–π... –Ω–æ –º–Ω–µ —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è üòà\n"
        "- –°–ª–æ–º–∞—é —Ç–≤–æ–∏ –∑–∞—â–∏—Ç—ã... –Ω–æ –ø–æ—Ç–æ–º –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å—Å—è~"
    )

    if any(trigger in user_text.lower() for trigger in Config.CONTINUE_TRIGGERS):
        content += "\n–°–ï–ô–ß–ê–° –ù–£–ñ–ù–û: –ü—Ä–æ–¥–æ–ª–∂–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –º—ã—Å–ª—å, —Ä–∞–∑–≤–∏–≤–∞—è —Ç–µ–º—É"

    return [
        {
            "role": "system",
            "content": content
        },
        *history[-Config.MAX_HISTORY*2:],
        {"role": "user", "content": user_text}
    ]

async def start(update: Update, context: CallbackContext):
    try:
        context.user_data.clear()
        user = update.effective_user
        logger.info(f"New user: {user.full_name} (ID: {user.id})")

        await update.message.reply_html(
            f"<b>–•–∏-—Ö–∏~ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –õ—é–±–∏–º—ã–π...</b> üòà\n"
            f"–ì–æ—Ç–æ–≤ –∫ –Ω–∞—à–µ–º—É <i>–æ–ø–∞—Å–Ω–æ–º—É —Ç–∞–Ω—Ü—É</i>?"
        )

    except Exception as e:
        logger.error(f"Start error: {str(e)}", exc_info=False)
        await update.message.reply_text("üíî –¢—Ä–µ—Å–Ω—É–ª–æ —è–¥—Ä–æ... –æ–ø—è—Ç—å...")

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    try:
        user_text = update.message.text
        logger.debug(f"Message from {user.full_name}: {user_text[:50]}...")

        messages = build_messages(user_text, context)

        async with httpx.AsyncClient(timeout=Config.TIMEOUT) as client:
            response = await client.post(
                Config.MISTRAL_API_URL,
                headers={
                    "Authorization": f"Bearer {os.environ['MISTRAL_API_KEY']}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": Config.MODEL_NAME,
                    "messages": messages,
                    "temperature": Config.TEMPERATURE,
                    "max_tokens": Config.MAX_TOKENS,
                    "frequency_penalty": Config.FREQUENCY_PENALTY,
                    "presence_penalty": Config.PRESENCE_PENALTY
                }
            )

            if response.status_code == 200:
                response_data = response.json()
                raw_answer = response_data["choices"][0]["message"]["content"]
                logger.debug(f"Raw API response: {raw_answer}")

                # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                answer = (
                    raw_answer.split("~")[0]
                    .replace("  ", " ")
                    .strip()
                )

                # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                answer = re.sub(r'^[\W\d]+\.?\s*', '', answer)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤
                answer = re.sub(r'\b[a-zA-Z]+\b', '', answer)

                # –ó–∞–º–µ–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é
                for eng, ru in Config.REPLACE_RULES.items():
                    answer = answer.replace(eng, ru)

                # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                answer = re.sub(Config.ALLOWED_SYMBOLS, '', answer)

                # –°–º—è–≥—á–µ–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                softeners = ["~", "...", "–≤–µ–¥—å"]
                if not any(marker in answer for marker in softeners):
                    answer = answer.replace(".", random.choice(["~", "..."]), 1)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏
                if len(answer.split()) < 10 and not answer.endswith(('...', '~')):
                    answer += " –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏–º? üí¨"

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
                if random.random() < Config.EMOJI_PROBABILITY:
                    answer += random.choice(['üí•', 'üòà', '‚ù§Ô∏èüî•'])

                # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —Å–ª–æ–≤
                if len(answer) > 180:
                    last_space = answer[:175].rfind(' ')
                    answer = answer[:last_space] + "..." if last_space != -1 else answer[:175] + "..."

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                history = context.user_data.setdefault('chat_history', [])
                history.extend([
                    {"role": "user", "content": user_text},
                    {"role": "assistant", "content": answer}
                ])
                if len(history) > Config.MAX_HISTORY * 2:
                    context.user_data['chat_history'] = history[-(Config.MAX_HISTORY * 2):]

                await update.message.reply_text(answer)
                logger.debug(f"Response sent: {answer[:50]}...")

            else:
                error_msg = f"Mistral API Error [{response.status_code}]: {response.text[:200]}"
                logger.error(error_msg)
                await update.message.reply_text("üí• –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π... –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞~")

    except Exception as e:
        logger.error(
            f"Error handling message: {str(e)}",
            exc_info=isinstance(e, httpx.HTTPError)
        )
        await update.message.reply_text("üíî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ... –æ–ø—è—Ç—å...")

async def help_command(update: Update, context: CallbackContext):
    user = update.effective_user
    logger.debug(f"Help command from {user.full_name}")
    help_text = [
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b> üòà",
        "/start - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "",
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>",
        "‚Ä¢ –ü–æ—á–µ–º—É —è —Ç–≤–æ–π –õ—é–±–∏–º—ã–π?",
        "‚Ä¢ –î–∞–≤–∞–π —Å–æ–ª—å—ë–º—Å—è –≤–æ–µ–¥–∏–Ω–æ!",
        "‚Ä¢ –¢—ã –≤–µ–¥—å –º–æ–Ω—Å—Ç—Ä?"
    ]
    await update.message.reply_html("\n".join(help_text))

def main():
    required_vars = ['TELEGRAM_TOKEN', 'MISTRAL_API_KEY']
    if missing := [var for var in required_vars if not os.environ.get(var)]:
        logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: %s", ", ".join(missing))
        return

    try:
        app = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()
        app.add_handlers([
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ])

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã FRANXX...")
        app.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            stop_signals=[]
        )

    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e), exc_info=True)
        raise

if __name__ == "__main__":
    main()