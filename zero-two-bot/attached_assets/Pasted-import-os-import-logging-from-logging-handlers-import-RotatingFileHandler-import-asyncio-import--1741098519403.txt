import os
import logging
from logging.handlers import RotatingFileHandler
import asyncio
import httpx
from datetime import datetime
import base64
import binascii
import io
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)
from async_lru import alru_cache
from PIL import Image  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

async def generate_art(update: Update, context: CallbackContext, model_name: str = "stabilityai/sdxl-turbo"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–æ–≤"""
    try:
        processing_message = await update.message.reply_text("üí´ –†–∏—Å—É—é —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –õ—é–±–∏–º—ã–π...")
        prompt_text = " ".join(context.args) if context.args else ""
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        model_configs = {
            "stabilityai/sdxl-turbo": {
                "url": "https://api.deepinfra.com/v1/inference/stabilityai/sdxl-turbo",
                "params": {
                    "prompt": f"anime artwork of Zero Two (character code 002) from Darling in the Franxx, pink hair, red horns, {prompt_text}",
                    "num_inference_steps": 3,
                    "guidance_scale": 7.5,
                    "negative_prompt": "worst quality, low quality, deformed, ugly, bad anatomy",
                    "width": 768,
                    "height": 768
                }
            },
            "meta-llama/Meta-Janus-Pro-7B": {
                "url": "https://api.deepinfra.com/v1/inference/meta-llama/Meta-Janus-Pro-7B",
                "params": {
                    "prompt": f"anime artwork of Zero Two (character code 002) from Darling in the Franxx, pink hair, red horns, {prompt_text}",
                    "negative_prompt": "worst quality, low quality, deformed, ugly, bad anatomy",
                    "width": 768,
                    "height": 768,
                    "guidance_scale": 7.5,
                    "num_inference_steps": 20,
                    "seed": 42
                }
            }
        }

        config = model_configs.get(model_name)
        if not config:
            await update.message.reply_text("üíî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
            return

        async with httpx.AsyncClient(timeout=90.0) as client:
            response = await client.post(
                config["url"],
                headers={"Authorization": f"Bearer {os.environ['DEEPINFRA_API_KEY']}"},
                json=config["params"]
            )

            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text}")
                await update.message.reply_text("üíî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                return

            result = response.json()
            if not result.get("images"):
                await update.message.reply_text("üíî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                return

            try:
                base64_str = result["images"][0]
                base64_str = base64_str.replace('\n', '').replace('\r', '').replace(' ', '+')
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ base64 —Å—Ç—Ä–æ–∫–∏
                if base64_str.startswith('data:image'):
                    base64_str = base64_str.split(',', 1)[1]
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º padding
                base64_str = base64_str.ljust(len(base64_str) + (4 - len(base64_str) % 4) % 4, '=')
                image_data = base64.b64decode(base64_str)

                # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                with io.BytesIO(image_data) as img_io, io.BytesIO() as output_io:
                    Image.open(img_io).save(output_io, format='PNG')
                    output_io.seek(0)
                    
                    await update.message.reply_photo(
                        photo=output_io,
                        caption="üíï –¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –õ—é–±–∏–º—ã–π!"
                    )
                    output_io.seek(0)
                    
                    await update.message.reply_document(
                        document=output_io,
                        filename="zero_two_art.png",
                        caption="üíå –°–æ—Ö—Ä–∞–Ω–∏ –Ω–∞ –ø–∞–º—è—Ç—å!"
                    )

            except (binascii.Error, OSError) as e:
                logger.error(f"Image processing error: {str(e)}")
                await update.message.reply_text("üíî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            except Exception as e:
                logger.error(f"Unexpected error: {str(e)}", exc_info=True)
                await update.message.reply_text("üíî –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!")

    except httpx.TimeoutException:
        await update.message.reply_text("üíî –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ...")
    except Exception as e:
        logger.error(f"General error: {str(e)}", exc_info=True)
        await update.message.reply_text("üíî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    finally:
        await processing_message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handlers([
    CommandHandler("art", lambda update, ctx: generate_art(update, ctx)),
    CommandHandler("janus", lambda update, ctx: generate_art(update, ctx, "meta-llama/Meta-Janus-Pro-7B")),
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
])