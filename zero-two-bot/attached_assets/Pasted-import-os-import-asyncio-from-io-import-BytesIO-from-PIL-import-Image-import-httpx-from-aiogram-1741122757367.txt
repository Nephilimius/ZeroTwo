import os
import asyncio
from io import BytesIO
from PIL import Image
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '–í–ê–®_TELEGRAM_BOT_TOKEN'
FUSIONBRAIN_API_KEY = '–í–ê–®_FUSIONBRAIN_API_KEY'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

async def generate_zero_two(prompt_addition: str = ""):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Zero Two —á–µ—Ä–µ–∑ FusionBrain API"""
    base_prompt = (
        "Zero Two from Darling in the Franxx, anime style, "
        "pink hair, red horns, detailed eyes, white bodysuit, "
        "futuristic background, vibrant colors, official art, "
        "8k resolution, masterpiece, best quality"
    )
    
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            generate_response = await client.post(
                "https://api.fusionbrain.ai/generate",
                headers={"Authorization": f"Key {FUSIONBRAIN_API_KEY}"},
                json={
                    "model": "kandinsky-2.2",
                    "width": 1024,
                    "height": 1024,
                    "num_images": 1,
                    "prompt": f"{base_prompt} {prompt_addition}",
                    "negative_prompt": "low quality, deformed, text, watermark, 3d, cartoonish"
                }
            )
            
            if generate_response.status_code != 200:
                return None
                
            task_id = generate_response.json()["uuid"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            for _ in range(30):  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                status_response = await client.get(
                    f"https://api.fusionbrain.ai/status/{task_id}",
                    headers={"Authorization": f"Key {FUSIONBRAIN_API_KEY}"}
                )
                
                status = status_response.json().get("status")
                
                if status == "DONE":
                    image_url = status_response.json()["images"][0]["url"]
                    image_data = await client.get(image_url)
                    return Image.open(BytesIO(image_data.content))
                    
                elif status == "FAILED":
                    return None
                    
                await asyncio.sleep(2)
                
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return None

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–æ–≤ Zero Two üíñ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /zero [–æ–ø–∏—Å–∞–Ω–∏–µ] —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ç\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /zero –≤ –±–∏–∫–∏–Ω–∏ –Ω–∞ –ø–ª—è–∂–µ"
    )
    await message.reply(welcome_text)

@dp.message_handler(commands=['zero'])
async def handle_zero_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /zero"""
    try:
        prompt = message.get_args()
        user = message.from_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_msg = await message.reply("üñåÔ∏è –ù–∞—á–∏–Ω–∞—é —Ä–∏—Å–æ–≤–∞—Ç—å Zero Two...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = await generate_zero_two(prompt)
        
        if image:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            img_io = BytesIO()
            image.save(img_io, format='JPEG', quality=95)
            img_io.seek(0)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=processing_msg.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply_photo(
                photo=img_io,
                caption=f"–í–∞—à–∞ Zero Two –≥–æ—Ç–æ–≤–∞, {user.first_name}! üíù\n"
                        f"–ó–∞–ø—Ä–æ—Å: {prompt if prompt else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Ä—Ç'}"
            )
        else:
            await message.reply("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.reply("‚ö° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)