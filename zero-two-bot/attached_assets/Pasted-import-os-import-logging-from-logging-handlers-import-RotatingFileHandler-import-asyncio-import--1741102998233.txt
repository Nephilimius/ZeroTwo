import os
import logging
from logging.handlers import RotatingFileHandler
import asyncio
import httpx
import base64
import binascii
import io
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)
from async_lru import alru_cache
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = RotatingFileHandler("zero_two_bot.log", maxBytes=5 * 1024 * 1024, backupCount=2)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[handler, logging.StreamHandler()]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

class Config:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    TEXT_MODEL_NAME = "mistralai/Mixtral-8x7B-Instruct-v0.1"
    MAX_HISTORY = 5
    TEMPERATURE = 0.75
    MAX_TOKENS = 400
    TIMEOUT = 30.0
    LIBRETRANSLATE_URL = "https://libretranslate.com/translate"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    ART_MODEL_URL = "https://api.deepinfra.com/v1/inference/stability-ai/sdxl"
    ART_TIMEOUT = 90.0

SYSTEM_PROMPT = """..."""  # –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏–∏ translate_to_russian, build_prompt, start, handle_message 
# –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞

async def generate_art(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ DeepInfra API (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        processing_message = await update.message.reply_text("üí´ –†–∏—Å—É—é —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –õ—é–±–∏–º—ã–π...")
        prompt = " ".join(context.args) if context.args else "Zero Two"

        async with httpx.AsyncClient(timeout=Config.ART_TIMEOUT) as client:
            response = await client.post(
                Config.ART_MODEL_URL,
                headers={
                    "Authorization": f"Bearer {os.environ['DEEPINFRA_API_KEY']}",
                    "Content-Type": "application/json"
                },
                json={
                    "prompt": f"anime artwork of Zero Two (Darling in the Franxx), {prompt}",
                    "width": 1024,
                    "height": 1024
                }
            )

            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text}")
                await update.message.reply_text("üíî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
                return

            image_data = response.content

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            with io.BytesIO(image_data) as img_io, io.BytesIO(image_data) as doc_io:
                img_io.seek(0)
                doc_io.seek(0)
                
                await update.message.reply_photo(
                    photo=img_io,
                    caption="üíï –¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –õ—é–±–∏–º—ã–π!"
                )
                
                doc_io.seek(0)
                await update.message.reply_document(
                    document=doc_io,
                    filename="zero_two_art.png",
                    caption="üíå –°–æ—Ö—Ä–∞–Ω–∏ –Ω–∞ –ø–∞–º—è—Ç—å!"
                )

    except httpx.TimeoutException:
        await update.message.reply_text("üíî –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ...")
    except Exception as e:
        logger.error(f"Art Error: {str(e)}", exc_info=True)
        await update.message.reply_text("üíî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    finally:
        await processing_message.delete()

async def help_command(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"""
    help_text = [
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>",
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ",
        "/art [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç —Å Zero Two",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
        "",
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ Zero Two! üíã"
    ]
    await update.message.reply_html("\n".join(help_text))

def main():
    try:
        required_vars = ['TELEGRAM_TOKEN', 'DEEPINFRA_API_KEY']
        missing = [var for var in required_vars if not os.environ.get(var)]
        if missing:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

        app = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()
        
        app.add_handlers([
            CommandHandler("start", start),
            CommandHandler("art", generate_art),
            CommandHandler("help", help_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ])

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()