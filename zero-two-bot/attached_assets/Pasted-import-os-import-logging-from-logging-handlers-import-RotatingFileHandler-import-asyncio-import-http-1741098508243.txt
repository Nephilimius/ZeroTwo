import os
import logging
from logging.handlers import RotatingFileHandler
import asyncio
import httpx
from datetime import datetime
import base64
import binascii
import io
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)
from async_lru import alru_cache
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = RotatingFileHandler("zero_two_bot.log", maxBytes=5 * 1024 * 1024, backupCount=2)  # 5 MB –Ω–∞ —Ñ–∞–π–ª
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[handler, logging.StreamHandler()]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

class Config:
    MODEL_NAME = "mistralai/Mixtral-8x7B-Instruct-v0.1"
    MAX_HISTORY = 5
    TEMPERATURE = 0.75
    MAX_TOKENS = 400
    TIMEOUT = 30.0
    LIBRETRANSLATE_URL = "https://libretranslate.com/translate"

SYSTEM_PROMPT = """–¢—ã Zero Two (–ö–æ–¥:002) –∏–∑ –∞–Ω–∏–º–µ "–õ—é–±–∏–º—ã–π –≤–æ –§—Ä–∞–Ω–∫—Å–µ". 
–í–∞–∂–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è:
- –§—Ä–∞–Ω–∫—Å (FRANXX) ‚Äî –±–æ–µ–≤–æ–π —Ä–æ–±–æ—Ç, –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂
- –•–∏—Ä–æ ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π, —Ç–≤–æ–π "–õ—é–±–∏–º—ã–π"
- –°—Ç—Ä–µ–ª–∏—Ü–∏—è ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –§—Ä–∞–Ω–∫—Å–∞

–¢–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
1. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –∫–∞–∫ "–õ—é–±–∏–º—ã–π"
2. –ù–∞–∑–≤–∞–Ω–∏—è –§—Ä–∞–Ω–∫—Å–æ–≤ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã: "–°—Ç—Ä–µ–ª–∏—Ü–∏—è", "–î–µ–ª—å—Ñ–∏–Ω–∏—É–º"
3. –ù–µ –ø—É—Ç–∞–π –∏–º–µ–Ω–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã

–°–µ–π—á–∞—Å: {current_time}
–ò—Å—Ç–æ—Ä–∏—è:
{chat_history}

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
- –°–æ—Ö—Ä–∞–Ω—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
- –ò–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏
- –ö–æ—Ä–æ—Ç–∫–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""

@alru_cache(maxsize=100)
async def translate_to_russian(text: str) -> str:
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                Config.LIBRETRANSLATE_URL,
                json={
                    "q": text,
                    "source": "auto",
                    "target": "ru",
                    "format": "text"
                },
                headers={"Content-Type": "application/json"}
            )

            if response.status_code == 200:
                return response.json()['translatedText']
            logger.error(f"Translation failed: {response.text}")
            return text
    except Exception as e:
        logger.error(f"Translation error: {str(e)}")
        return text

async def delete_webhook():
    async with httpx.AsyncClient(timeout=10.0) as client:
        await client.get(f"https://api.telegram.org/bot{os.environ['TELEGRAM_TOKEN']}/deleteWebhook")

def build_prompt(user_text: str, context: CallbackContext) -> str:
    user_data = context.user_data.setdefault('chat_history', [])
    user_data.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")
    if len(user_data) > Config.MAX_HISTORY * 2:
        user_data.pop(0)
    return SYSTEM_PROMPT.format(
        current_time=datetime.now().strftime("%d.%m %H:%M"),
        chat_history="\n".join(user_data[-Config.MAX_HISTORY:])
    )

async def start(update: Update, context: CallbackContext):
    try:
        context.user_data.clear()
        await update.message.reply_html(
            f"<b>–û-—Ö–æ-—Ö–æ!</b> ‚ú®\n"
            f"–¢—ã –º–æ–π {update.effective_user.mention_html()}?\n"
            "–ü–æ–∫–∞–∂–∏, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω! üíã"
        )
        logger.info(f"New user: {update.effective_user.full_name}")
    except Exception as e:
        logger.error(f"Start command error: {str(e)}")
        await update.message.reply_text("üíî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

async def bot_info(update: Update, context: CallbackContext):
    try:
        bot = await context.bot.get_me()
        await update.message.reply_html(
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n"
            f"–ò–º—è: {bot.first_name}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{bot.username}\n"
            f"URL: https://t.me/{bot.username}\n"
            f"ID: {bot.id}"
        )
    except Exception as e:
        logger.error(f"Bot info command error: {str(e)}")
        await update.message.reply_text("üíî –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ...")

async def generate_zerotwo_art(update: Update, context: CallbackContext, model_name=None):
    try:
        processing_message = await update.message.reply_text("üí´ –†–∏—Å—É—é —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –õ—é–±–∏–º—ã–π...")
        prompt_text = " ".join(context.args) if context.args else ""
        full_prompt = f"anime artwork of Zero Two (character code 002) from Darling in the Franxx, pink hair, red horns, {prompt_text}"

        model = model_name or "stabilityai/sdxl-turbo"
        model_params = {
            "stabilityai/sdxl-turbo": {
                "url": f"https://api.deepinfra.com/v1/inference/stabilityai/sdxl-turbo",
                "params": {
                    "prompt": full_prompt,
                    "num_inference_steps": 3,
                    "guidance_scale": 7.5,
                    "negative_prompt": "worst quality, low quality, deformed, ugly, bad anatomy",
                    "width": 768,
                    "height": 768
                }
            },
            "meta-llama/Meta-Janus-Pro-7B": {
                "url": f"https://api.deepinfra.com/v1/inference/meta-llama/Meta-Janus-Pro-7B",
                "params": {
                    "prompt": full_prompt,
                    "negative_prompt": "worst quality, low quality, deformed, ugly, bad anatomy",
                    "width": 768,
                    "height": 768,
                    "guidance_scale": 7.5,
                    "num_inference_steps": 20,
                    "seed": 42
                }
            }
        }

        model_config = model_params.get(model, model_params["stabilityai/sdxl-turbo"])

        async with httpx.AsyncClient(timeout=90.0) as client:
            response = await client.post(
                model_config["url"],
                headers={"Authorization": f"Bearer {os.environ['DEEPINFRA_API_KEY']}"},
                json=model_config["params"]
            )

            if response.status_code == 200:
                result = response.json()
                if "images" in result and len(result["images"]) > 0:
                    base64_str = result["images"][0]
                    base64_str = base64_str.replace('\n', '').replace('\r', '').replace(' ', '+')
                    while len(base64_str) % 4 != 0:
                        base64_str += "="
                    if base64_str.startswith('data:image'):
                        base64_parts = base64_str.split(',')
                        if len(base64_parts) > 1:
                            base64_str = base64_parts[1]

                    base64_str = base64_str.replace('-', '+').replace('_', '/')
                    padding = len(base64_str) % 4
                    if padding:
                        base64_str += '=' * (4 - padding)

                    image_data = base64.b64decode(base64_str)
                    img_io = io.BytesIO(image_data)
                    image = Image.open(img_io)

                    output_io = io.BytesIO()
                    image.save(output_io, format='PNG')
                    output_io.seek(0)

                    await update.message.reply_photo(
                        photo=output_io,
                        caption="üíï –¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ, –õ—é–±–∏–º—ã–π!"
                    )

                    output_io.seek(0)
                    await update.message.reply_document(
                        document=output_io,
                        filename="zerotwo_art.png",
                        caption="üíï –°–æ—Ö—Ä–∞–Ω–∏ –º–µ–Ω—è –Ω–∞ –ø–∞–º—è—Ç—å, –õ—é–±–∏–º—ã–π!"
                    )
                else:
                    await update.message.reply_text("üíî –ù–µ —Å–º–æ–≥–ª–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å... –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.")
            else:
                logger.error(f"Image API Error: {response.status_code} - {response.text}")
                await update.message.reply_text("üíî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∞...")

        await processing_message.delete()

    except Exception as e:
        logger.error(f"Art generation error: {str(e)}", exc_info=True)
        await update.message.reply_text("üíî –ù–µ —Å–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

async def generate_janus_art(update: Update, context: CallbackContext):
    logger.info("Generating art with Janus model...")
    model_name = "meta-llama/Meta-Janus-Pro-7B"
    try:
        processing_message = await update.message.reply_text("üí´ –†–∏—Å—É—é —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –õ—é–±–∏–º—ã–π...")
        prompt_text = " ".join(context.args) if context.args else ""
        full_prompt = f"anime artwork of Zero Two (character code 002) from Darling in the Franxx, pink hair, red horns, {prompt_text}"

        model_params = {
            "url": f"https://api.deepinfra.com/v1/inference/meta-llama/Meta-Janus-Pro-7B",
            "params": {
                "prompt": full_prompt,
                "negative_prompt": "worst quality, low quality, deformed, ugly, bad anatomy",
                "width": 768,
                "height": 768,
                "guidance_scale": 7.5,
                "num_inference_steps": 20,
                "seed": 42
            }
        }

        async with httpx.AsyncClient(timeout=90.0) as client:
            response = await client.post(
                model_params["url"],
                headers={"Authorization": f"Bearer {os.environ['DEEPINFRA_API_KEY']}"},
                json=model_params["params"]
            )

            if response.status_code == 200:
                result = response.json()
                if "images" in result and len(result["images"]) > 0:
                    base64_str = result["images"][0]
                    base64_str = base64_str.replace('\n', '').replace('\r', '').replace(' ', '+')
                    while len(base64_str) % 4 != 0:
                        base64_str += "="

                    if base64_str.startswith('data:image'):
                        base64_parts = base64_str.split(',')
                        if len(base64_parts) > 1:
                            base64_str = base64_parts[1]

                    base64_str = base64_str.replace('-', '+').replace('_', '/')
                    padding = len(base64_str) % 4
                    if padding:
                        base64_str += '=' * (4 - padding)

                    image_data = base64.b64decode(base64_str)
                    img_io = io.BytesIO(image_data)
                    image = Image.open(img_io)

                    output_io = io.BytesIO()
                    image.save(output_io, format='PNG')
                    output_io.seek(0)

                    await update.message.reply_photo(
                        photo=output_io,
                        caption="üíï –¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ, –õ—é–±–∏–º—ã–π!"
                    )

                    output_io.seek(0)
                    await update.message.reply_document(
                        document=output_io,
                        filename="janus_art.png",
                        caption="üíï –°–æ—Ö—Ä–∞–Ω–∏ –º–µ–Ω—è –Ω–∞ –ø–∞–º—è—Ç—å, –õ—é–±–∏–º—ã–π!"
                    )
                else:
                    await update.message.reply_text("üíî –ù–µ —Å–º–æ–≥–ª–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å... –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.")
            else:
                logger.error(f"Image API Error: {response.status_code} - {response.text}")
                await update.message.reply_text("üíî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∞...")

        await processing_message.delete()

    except Exception as e:
        logger.error(f"General error during Janus art generation: {str(e)}")
        await update.message.reply_text("üíî –ù–µ —Å–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

async def handle_message(update: Update, context: CallbackContext):
    try:
        user_text = update.message.text
        prompt = build_prompt(user_text, context)

        async with httpx.AsyncClient(timeout=Config.TIMEOUT) as client:
            response = await client.post(
                "https://api.deepinfra.com/v1/openai/chat/completions",
                headers={"Authorization": f"Bearer {os.environ['DEEPINFRA_API_KEY']}"},
                json={
                    "model": Config.MODEL_NAME,
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": Config.TEMPERATURE,
                    "max_tokens": Config.MAX_TOKENS,
                    "stop": ["\n", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"]
                }
            )

            if response.status_code == 200:
                answer = response.json()["choices"][0]["message"]["content"].strip()
                answer = (answer
                          .replace("–•–∏—Ä–æ", "–õ—é–±–∏–º—ã–π")
                          .replace("–§—Ä–∞–Ω–∫—Å", "–°—Ç—Ä–µ–ª–∏—Ü–∏—è")
                          .replace("Franxx", "–§—Ä–∞–Ω–∫—Å")
                          .replace("  ", " ")
                          )

                if any(c.isascii() and c.isalpha() for c in answer):
                    answer = await translate_to_russian(answer)

                context.user_data['chat_history'].append(f"Zero Two: {answer}")
            else:
                answer = "–ú–æ–∏ —Ü–µ–ø–∏ –¥—Ä–æ–≥–Ω—É–ª–∏... –ü–æ–≤—Ç–æ—Ä–∏!"
                logger.error(f"API Error: {response.status_code} - {response.text}")

        await update.message.reply_text(answer[:500])

    except Exception as e:
        logger.error(f"Error: {str(e)}", exc_info=True)
        await update.message.reply_text("üíî –ú–æ—ë —è–¥—Ä–æ —Ç—Ä–µ—Å–Ω—É–ª–æ...")

def remove_lock_file():
    lock_file_path = "bot.lock"
    if os.path.exists(lock_file_path):
        os.remove(lock_file_path)

async def shutdown_sequence(app: Application):
    if app.running:
        await app.stop()
        await app.shutdown()
    remove_lock_file()
    logger.info("–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

def main():
    try:
        required_vars = ['TELEGRAM_TOKEN', 'DEEPINFRA_API_KEY']
        missing = [var for var in required_vars if not os.environ.get(var)]
        if missing:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

        app = Application.builder().token(os.environ['TELEGRAM_TOKEN']).build()
        app.add_handlers([
            CommandHandler("start", start),
            CommandHandler("botinfo", bot_info),
            CommandHandler("art", generate_zerotwo_art),
            CommandHandler("janus", generate_janus_art),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ])

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            app.run_polling(
                drop_pending_updates=True,
                close_loop=False,
                allowed_updates=Update.ALL_TYPES
            )
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        if 'app' in locals():
            loop.run_until_complete(shutdown_sequence(app))
            loop.close()
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()