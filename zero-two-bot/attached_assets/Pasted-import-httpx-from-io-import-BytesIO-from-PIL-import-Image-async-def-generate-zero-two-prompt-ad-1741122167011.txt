import httpx
from io import BytesIO
from PIL import Image

async def generate_zero_two(prompt_addition: str = ""):
    """Генерация артов Zero Two через FusionBrain API"""
    API_KEY = "ВАШ_API_КЛЮЧ"  # Получить в кабинете fusionbrain.ai
    BASE_PROMPT = """
    Zero Two from Darling in the Franxx, anime style, 
    pink hair, red horns, detailed eyes, white bodysuit, 
    futuristic background, vibrant colors, 
    official art, 8k resolution, masterpiece
    """
    
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            # Создаем задание на генерацию
            response = await client.post(
                "https://api.fusionbrain.ai/generate",
                headers={"Authorization": f"Key {API_KEY}"},
                json={
                    "model": "kandinsky-2.2",  # Лучшая модель для аниме
                    "width": 1024,
                    "height": 1024,
                    "num_images": 1,
                    "prompt": f"{BASE_PROMPT} {prompt_addition}",
                    "negative_prompt": "low quality, deformed, text, watermark"
                }
            )
            
            if response.status_code == 200:
                # Получаем UUID задачи
                task_id = response.json()["uuid"]
                
                # Проверяем статус каждые 2 секунды
                while True:
                    status_response = await client.get(
                        f"https://api.fusionbrain.ai/status/{task_id}",
                        headers={"Authorization": f"Key {API_KEY}"}
                    )
                    
                    status = status_response.json()["status"]
                    
                    if status == "DONE":
                        # Получаем изображение
                        image_data = await client.get(
                            status_response.json()["images"][0]["url"]
                        )
                        
                        # Конвертируем в PIL Image
                        return Image.open(BytesIO(image_data.content))
                        
                    elif status == "FAILED":
                        raise Exception("Ошибка генерации")
                    
                    await asyncio.sleep(2)
                    
            else:
                raise Exception(f"API Error: {response.text}")
                
    except Exception as e:
        print(f"Ошибка: {str(e)}")
        return None

# Пример использования
async def main():
    image = await generate_zero_two("fighting pose, mecha in background")
    if image:
        image.save("zero_two_art.jpg")
        print("Изображение сохранено!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())